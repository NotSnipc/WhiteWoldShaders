// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// Youtube: None
// Gametag: XxilluritoxDxX
// Grup Fb: None


//=============== TTW Shader ===========

#if __VERSION__ >= 300

	// version 300 code

	#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
	#else
		#define _centroid
	#endif

	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif

	#define varying in
	#define texture2D texture
	out vec4 FragColor;
	#define gl_FragColor FragColor
#else

	// version 100 code

	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif


varying vec4 color;
varying float new_fog;
varying vec3 screen_pos;

varying highp vec3 fragment_pos;
varying highp vec3 look_vector;

varying float water_plane_flag;
varying float lava_plane_flag;

varying POS3 hmzrE;


#ifdef FOG
varying vec4 fogColor;
#endif

#ifdef BLEND
varying float cameraDist;
#endif

#include "util.h"

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;
uniform sampler2D TEXTURE_2;
uniform vec2 FOG_CONTROL;
uniform vec4 FOG_COLOR;
uniform highp float TIME;

const vec4 obor = vec4(1.5, 0.5, 0.20, 0.0);
const vec3 origin_water_normal = vec3(0.0, 1.0, 0.0);

  
#define WEATHER
#define ADV_WATER
#define REFLECTION
#define SUN_REFLECTION
#define enableMaps
#define saturation 1.70
#define exposure 1.0


highp float cos_between_vecs(highp vec3 v1, highp vec3 v2){
 return (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z) / length(v1) / length(v2);
}

highp float randff(highp float n){
 return fract(cos(n) * 3782.288);
}

highp float smoothrand(highp float pos){
 highp float start = floor(pos);
 highp float smoothy = smoothstep(0.0, 1.0, fract(pos));
 return mix(randff(start), randff(start + 1.0), smoothy);}

highp float smoothrand2d(highp float horizont, highp float forward){
 highp float start = floor(forward);
 highp float smoothy = smoothstep(0.0, 1.0, fract(forward));
 return mix(smoothrand(horizont + randff(start) * 600.0), smoothrand(horizont + randff(start + 1.0) * 600.0), smoothy);
}

highp float CheapWaterMap(highp vec3 pos){
pos.z += TIME * 0.5;
 highp float wave1 = smoothrand2d(pos.z+pos.z+pos.z, pos.z+pos.x+pos.x);
 highp float wave2 = sin(wave1) * 0.5 + 0.5;
float interp = sin(TIME * 5.0 + pos.z+pos.x+pos.z+pos.x) * sin(pos.z) * 0.5;
 return mix(wave1, wave2, interp);
}

highp vec3 WaterZrMap(highp vec3 pos){
 highp float value = (CheapWaterMap(pos + vec3(0.0, 0.0, 0.1)) - CheapWaterMap(pos)) * 1.0;
 return vec3(0.0, 1.0, -value);
}

vec3 getWaterColor(float light){
 vec3 base_color = vec3(0.0, 0.0, 1.0);
 if(light < 0.5){return base_color * sqrt(2.0 * light);}
 return base_color + (1.0 - base_color) * pow((light - 0.5) / 0.5, 2.0);
}



float filmc(float x) {

float A = 0.22;
float B = 0.3;
float C = 0.15 * 1.30;
float D = 0.4 * 1.30;
float E = 0.01 * 1.87;
float F = 0.2;

return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;

}

vec3 HmZrMaps(vec3 clr) {
float W = 1.3 / exposure;
#ifdef enableMaps
float Luma = dot(clr, vec3(0.0, 0.3, 0.3));
vec3 Chroma = clr - Luma;
clr = (Chroma * saturation) + Luma;

  clr = vec3(filmc(clr.r), filmc(clr.g), filmc(clr.b)) / filmc(W);
#endif

return clr;
}

void main()
{

#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 

    vec3 bayangan = vec3(0.8,0.8,0.8);
    float swamzr = 0.0;
    float lea_flag = 0.0;

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
    vec4 night = texture2D(TEXTURE_1, uv1);
    vec4 uvs = texture2D( TEXTURE_1, vec2(uv1.x*0.65,uv1.y));
#else
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0 );
#endif

vec4 inColor = color;
vec4 fog = FOG_COLOR;
vec4 transf = texture2D( TEXTURE_1,vec2(0.0, 1.0));
float gu = color.g;

#ifdef SEASONS_FAR
	diffuse.a = 1.0;
	inColor.b = 1.0;
#endif

#ifdef ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
		float alphaThreshold = .05;
	#else
		float alphaThreshold = .5;
	#endif
	if(diffuse.a < alphaThreshold)
		discard;
#endif
	night.rgb *= max(night.rgb, vec3(0.6,0.73,1.0));
    diffuse *= 1.65;
	diffuse = diffuse * night;

	//diffuse = diffuse * texture2D( TEXTURE_1, uv1 );


#ifndef SEASONS

#if !defined(ALPHA_TEST) && !defined(BLEND)
	diffuse.a = inColor.a;
#elif defined(BLEND)
	diffuse.a *= inColor.a;
	#ifdef BLEND
		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		diffuse.a = mix(diffuse.a, 1.0, alphaFadeOut);
       
	#endif
#endif	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif


#if defined(BLEND) || defined(REFLECT_FAR_WATER)
#ifndef BLEND
if(water_plane_flag > 0.5){
#endif
#ifdef ADV_WATER
highp vec3 frag_water_normal = WaterZrMap(fragment_pos);

highp vec3 airnormal = mix(frag_water_normal, origin_water_normal, min(1.0, length(look_vector.xz) / max(50.0, abs(look_vector.y) * 4.0)));

highp float sudut = acos(abs(cos_between_vecs(look_vector, airnormal)));

diffuse = vec4(0.7, 1.2, 1.05,0.3) * uvs;

#ifdef REFLECTION

diffuse.a = pow(sudut / (3.0), 1.4);

#endif
#endif
#endif

#ifdef FOG
swamzr = 1.0;
#endif

if(((uv1.y<=0.8751)||(gu<=0.64))&&swamzr==0.0){
diffuse.rgb *= bayangan * 1.1;
}
if(((uv1.y<=0.8761)||(gu<=0.63))&&swamzr==0.0){
diffuse.rgb *= bayangan * 1.2;
}
if(((uv1.y<=0.8771)||(gu<=0.62))&&swamzr==0.0){
diffuse.rgb *= bayangan * 1.1;
}

#ifdef FOG
	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
#endif

   diffuse += obor * pow( uv1.x * 1.0, 9.5);
   diffuse.rgb = HmZrMaps(diffuse.rgb); 
	gl_FragColor = diffuse;

#endif // BYPASS_PIXEL_SHADER
}
