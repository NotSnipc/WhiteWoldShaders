// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// Youtube: None
// Gametag: XxilluritoxDxX
// Grup Fb: None


//=============== TTW Shader ===========

#if __VERSION__ >= 300
	#define attribute in
	#define varying out

	#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
	#else
		#define _centroid
	#endif

	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

#ifndef BYPASS_PIXEL_SHADER
	varying vec4 color;
#endif






#define ADV_WATER
#define REFLECTION
#define SUN_REFLECTION
#define ADV_LAVA

varying float new_fog;
varying vec3 screen_pos;

varying highp vec3 fragment_pos;
varying highp vec3 look_vector;

varying float water_plane_flag;
varying float lava_plane_flag;

varying POS3 hmzrE;

#ifdef FOG
	varying vec4 fogColor;
#endif

#ifdef BLEND
	varying float cameraDist;
#endif

#ifdef AS_ENTITY_RENDERER
	uniform MAT4 WORLDVIEWPROJ;
#else
	uniform MAT4 WORLDVIEW;
	uniform MAT4 PROJ;
#endif
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;
uniform vec2 VIEWPORT_DIMENSION;
uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
uniform POS4 CHUNK_ORIGIN_AND_SCALE;
uniform POS3 VIEW_POS;
uniform float FAR_CHUNKS_DISTANCE;
uniform highp float TIME;
attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

const float pi = 3.1415926535897942684626;
const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange

void main()
{
  vec3 xyz =POSITION.xyz*1.0;
  float goy =0.0;
  
if(COLOR.a==0.0){
goy=0.053*sin((xyz.x+xyz.y+TIME*(2.50-FOG_CONTROL.x))*pi*0.5);}


    POS4 worldPos;
#ifdef AS_ENTITY_RENDERER
		POS4 pos = WORLDVIEWPROJ * POSITION;
		worldPos = pos;
#else
    worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
    worldPos.w = 1.0;
    worldPos.y+=goy*0.37;  
    // Transform to view space before projection instead of all at once to avoid floating point errors
    // Not required for entities because they are already offset by camera translation before rendering
    // World position here is calculated above and can get huge
    POS4 pos = WORLDVIEW * worldPos;
    pos = PROJ * pos;
#endif
screen_pos.xy = pos.xy / (pos.z + 1.0);
screen_pos.z = pos.z;
gl_Position = pos;
#ifndef BYPASS_PIXEL_SHADER
    uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;
#endif

///// find distance from the camera


///// find distance from the camera

#if defined(FOG) || defined(BLEND)
	#ifdef FANCY
		vec3 relPos = -worldPos.xyz;
		float cameraDepth = length(relPos);
		#ifdef BLEND
			cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
		#endif
	#else
		float cameraDepth = pos.z;
		#ifdef BLEND
			vec3 relPos = -worldPos.xyz;
			float camDist = length(relPos);
			cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		#endif
	#endif
#endif

///// apply fog

#ifdef FOG
	float len = cameraDepth / RENDER_DISTANCE*2.2;
	#ifdef ALLOW_FADE
		len += CURRENT_COLOR.r;
	#endif

    fogColor.rgb = FOG_COLOR.rgb;
	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.1);
#endif


///// water magic
#ifdef BLEND
	#ifdef FANCY  /////enhance water
		float F = dot(normalize(relPos), UNIT_Y);
		F = 1.0 - max(F, 0.1);
		F = 1.0 - mix(F*F*F*F, 1.0, min(1.0, cameraDepth / FAR_CHUNKS_DISTANCE));

		color.rg -= vec2(F * DIST_DESATURATION);

		
		vec4 depthColor = vec4(color.rgb * 0.1, 3.0);
 		vec4 traspColor = vec4(color.rgb * 0.25, 0.5);
 		vec4 surfColor = vec4(color.rgb, 0.85); 

		vec4 nearColor = mix(traspColor, depthColor, color.a);
		color = mix(surfColor, nearColor, F);
	#else
		// Completely insane, but if I don't have these two lines in here, the water doesn't render on a Nexus 6
		vec4 surfColor = vec4(color.rgb, 1.0);
		color = surfColor;
		color.a = pos.z / FAR_CHUNKS_DISTANCE + 0.559;
	#endif //FANCY
#endif
#ifdef ALPHA_TEST
if(color.a<=0.0){
gl_Position.x+=0.0;}
else if(color.g + color.g > color.r + color.b){
gl_Position.x+=0.053*sin((xyz.x+xyz.y+xyz.z+TIME*(2.0-FOG_CONTROL.x))*pi*0.5);

}
#endif

vec3 rel = -worldPos.xyz*0.5;
float addfog = length(rel);

#ifndef BYPASS_PIXEL_SHADER
new_fog = addfog / FAR_CHUNKS_DISTANCE*uv1.y*0.5;
#endif

POS3 cam_fix = worldPos.xyz + VIEW_POS;

fragment_pos = cam_fix;
fragment_pos.y += 0.0015;
look_vector = fragment_pos - VIEW_POS;

hmzrE = worldPos.xyz;
}
